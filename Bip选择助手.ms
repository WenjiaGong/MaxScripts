-- 父电捞 : 捞惑盔
-- 荤侩 棺 荐沥篮 磊蜡涝聪促. 窍瘤父 犁 硅器绰 陛瘤钦聪促.

global SoxBipedAssist		-- 费酒眶疙阑 臂肺国 函荐肺 牢侥窍扁 困秦 檬扁俊 茄 锅 荤侩

global rolLoadSelSetAssist

global strXmlRootNameAssist = "SelectionSet_Tools"


global arrSelSetNameLoadedAssist
global arrSelSetObjLoadedAssist
try (
	cui.unRegisterDialogBar SoxBipedAssist 
	destroydialog SoxBipedAssist
	) catch()
try (callbacks.removeScripts #filePostOpen id:#UpdateSelSetList) catch ()
	
fn fnSaveSelSetAll pathXml = 
(
	local dotNetXmlDoc = dotNetObject "System.xml.xmlDocument"
	local rootElement = dotNetXmlDoc.createElement strXmlRootNameAssist
	dotNetXmlDoc.appendChild rootElement

	for s in selectionSets do
	(
		local setElement = dotNetXmlDoc.createElement "SelectionSet"
		setElement.SetAttribute "SetName" s.name
		rootElement.appendChild setElement

		for o in s do
		(
			local objElement = dotNetXmlDoc.createElement "ObjectName"
			objElement.InnerText = o.name
			setElement.appendChild objElement
		)
	)
	dotNetXmlDoc.save pathXml
)

fn fnLoadSelXml pathXml = 
(
	local dotNetXmlDoc = dotNetObject "System.xml.xmlDocument"
	dotNetXmlDoc.Load pathXml
	local rootElement = dotNetXmlDoc.DocumentElement
	
	if rootElement.name != strXmlRootNameAssist then
	(
		messagebox "这不是BsSelSetTools创建的XML文件。          \t"
		undefined
	)
	
	local nodesSelSet = rootElement.ChildNodes

	local arrSelSetName = #()
	local arrSelSetObj = #()

	for i = 0 to nodesSelSet.count - 1 do
	(
		local elemSelSet = nodesSelSet.Item[i]
		
		append arrSelSetName (elemSelSet.Attributes.GetNamedItem "SetName").value
		
		local objNodes = elemSelSet.ChildNodes
		
		arrSelSetObj[i+1] = #()
		for j = 0 to objNodes.count - 1 do
		(
			local objElement = objNodes.Item[j]
			append arrSelSetObj[i+1] objElement.InnerText
		)
	)
	local result = #(arrSelSetName, arrSelSetObj)
	result
)

fn fnCreateSelSet arrSelSetName arrSelSetObj n = 
(
	local re_selset_obj_list = #()
	for o in arrSelSetObj[n] do
	(
		if getNodeByName o != undefined  then
		(
			append re_selset_obj_list o
		)
	)
	if re_selset_obj_list.count != 0 then
	(
		local txt = "selectionSets[\""
		txt += arrSelSetName[n] + "\"] = #("
		for o in re_selset_obj_list do
		(
			txt += "$'" + o +"', "
		)
		txt = substring txt  1 (txt.count - 2)
		txt+= ")"

		execute txt
	)else
	(
		messagebox( "Selection Set \"" + arrSelSetName[n] + "\" 是空的。\n选择集\"" + arrSelSetName[n] + "\"包含的对象不在场景中，所以未被读取...                    \t")
	)
)

fn fnSortNames str1 str2 = stricmp str1 str2

fn fnUpdateSelSetList = 
(
	local arrNodesList = #()
	for s in selectionSets do
	(
		append arrNodesList s.name
	)
	qsort arrNodesList fnSortNames
	SoxBipedAssist.mlbSelSet.items = arrNodesList
	SoxBipedAssist.mlbSelSet.selection = 0
	SoxBipedAssist.mlbSelSetNode.items = #()
	SoxBipedAssist.lblCount.text = "共 " + selectionsets.count as string + " 个选择集"
)

rollout rolCreateSelSet "创建选择集"
(
	edittext edtCreateName "命名:" width:190 pos:[5,5]
	button btnDoCreate "以选中物体创建选择集" width:190 pos:[5,30]

	on btnDoCreate pressed do 
	(
		local strCreate = edtCreateName.text
		local arrSelection = getcurrentselection()
		local arrSelSetName = for i in selectionsets collect i.name
		if ((strCreate != "") or (strCreate != undefined)) then 
		(
			if finditem arrSelSetName strCreate != 0 then
			(
				local duplicateSelSetName = arrSelSetName[finditem arrSelSetName strCreate]
				if (queryBox ("当前已有重名选择集，\r\n\r\n重名选择集：\"" + duplicateSelSetName + "\"\r\n\r\n是否将选择物体添加进该选择集？                                  ") \
				title:"选择集重名" beep:false) then
				(
					selectionsets[duplicateSelSetName] = join (join #() selectionsets[duplicateSelSetName]) arrSelection
					fnUpdateSelSetList()
				)
			)
			else (selectionsets[strCreate] = arrSelection;fnUpdateSelSetList())
		)
	
		try(destroydialog rolCreateSelSet)catch()
	)
)

rollout rolLoadSelSetAssist "加载选择集"
(
	multilistbox mlbLoadSelSet "选择集列表" height:22
	button btnLoadSel "加载选中" width:80 height: 25 across:2
	button btnLoadAll "加载所有" width:80 height:25
		
	on btnLoadSel pressed do
	(
		for n in mlbLoadSelSet.selection do
		(
			fnCreateSelSet arrSelSetNameLoadedAssist arrSelSetObjLoadedAssist n
		)
		fnUpdateSelSetList()
		try(destroydialog rolLoadSelSetAssist)catch()
	)
	
	on btnLoadAll pressed do(
		for n = 1 to mlbLoadSelSet.items.count do
		(
			fnCreateSelSet arrSelSetNameLoadedAssist arrSelSetObjLoadedAssist n
		)
		fnUpdateSelSetList()
		try(destroydialog rolLoadSelSetAssist)catch()
	)
)

rollout SoxBipedAssist "Sox Biped助手 v0.423"
(
	local mc_setKeyColor = color 140 0 0
	local mc_spineColor = color 8 110 134
	local Left_Right ="R"
	
	checkButton uiChkBtnScanBiped "扫描Biped" width:70 checked:true highlightColor:(color 180 0 80) tooltip:"缓存biped选择集以更快操作,如果biped配置发生更改,需重新扫描,如果有多个biped,仅扫描选择的biped." across:2
	button uiAbout "<< >>" tooltip:"左右停靠"
	checkBox uiChkSelHiddenObj "选择隐藏的biped" checked:true
	
	group ""
	(
	checkButton uiHead "0_0" width: 50 height:33 checked:true highlightColor:(color 55 137 221) offset:[0, -4]
	checkButton uiNecks "Necks" width: 35 checked:true highlightColor:mc_spineColor align:#center offset:[0, -4]
	
	checkButton uiRArms "Arms" checked:true highlightColor:(color 6 95 6) width:34 align:#left offset:[-8, -30] across:2
	checkButton uiLArms "Arms" checked:true highlightColor:(color 28 28 128) width:34 align:#right offset:[8, -30]
	
	checkButton uiRClavicle "R Clavicle" width:54 height:16 checked:true highlightColor:(color 6 134 6) across:2
	checkButton uiLClavicle "L Clavicle" width:54 height:16 checked:true highlightColor:(color 28 28 177) offset:[20, 0]
	
	checkButton uiAllSpine height:58 width:26 checked:true highlightColor:mc_spineColor offset:[-12, -4] align:#center tooltip:"All Spine"
	checkButton uiSpine2 "2" width:26 height:18 checked:true highlightColor:mc_spineColor align:#center offset:[16, -62]
	checkButton uiSpine1 "1" width:26 height:18 checked:true highlightColor:mc_spineColor align:#center offset:[16, -4]
	checkButton uiSpine0 "0" width:26 height:18 checked:true highlightColor:mc_spineColor align:#center offset:[16, -4]
	
	checkButton uiCOM "COM" checked:true width:42 height:22 highlightColor:(color 55 137 221) offset:[0, -4]
	checkButton uiPelvis "Pelvis" checked:true highlightColor:(color 161 134 25) width:50 height:18 offset:[0, -4]
	
	checkButton uiRUpArm "R" width:25  height:30 offset:[-18, -104] checked:true highlightColor:(color 6 134 6) across:2
	checkButton uiLUpArm "L" width:25  height:30 offset:[18, -104] checked:true highlightColor:(color 28 28 177)
	checkButton uiRForArm "R" width:25  height:30 offset:[-18, -4] checked:true highlightColor:(color 6 134 6) across:2
	checkButton uiLForArm "L" width:25  height:30 offset:[18, -4] checked:true highlightColor:(color 28 28 177)
	checkButton uiRHand "Hand" offset:[-22, -4] checked:true highlightColor:(color 6 134 6) across:2
	checkButton uiLHand "Hand" offset:[22, -4] checked:true highlightColor:(color 28 28 177)
	
	checkButton uiRThigh "R" width:25  height:30 align:#right checked:true highlightColor:(color 6 134 6) offset:[-4, 12] across:2
	checkButton uiLThigh "L" width:25 height:30 align:#left checked:true highlightColor:(color 28 28 177) offset:[4, 12]
	checkButton uiRCalf "R" width:25  height:30 checked:true highlightColor:(color 6 134 6) align:#right  offset:[-4, -4] across:2
	checkButton uiLCalf "L" width:25  height:30 checked:true highlightColor:(color 28 28 177) align:#left offset:[4, -4]
	checkButton uiRFoot "R Foot" checked:true highlightColor:(color 6 134 6) align:#right offset:[0, -4] width:43 height:25 across:2
	checkButton uiLFoot "L Foot" checked:true highlightColor:(color 28 28 177) align:#left offset:[0, -4] width:43 height:25
	
	checkButton uiRLegs "Legs" checked:true highlightColor:(color 6 95 6) width:30 align:#left offset:[-4, -70] across:2
	checkButton uiLLegs "Legs" checked:true highlightColor:(color 28 28 128) width:30 align:#right offset:[4, -70]
	
	checkButton uiRToe "toe" checked:true highlightColor:(color 6 134 6) width:25 height:18 align:#left offset:[-3, 22] across:2
	checkButton uiLToe "toe" checked:true highlightColor:(color 28 28 177) width:25 height:18 align:#right offset:[3, 22]
	
	checkButton uiAllFoot "All Foot" width:60 checked:true highlightColor:mc_spineColor align:#center  offset:[0, 0]
	checkButton uiAllBip "All Biped" width:100 checked:true highlightColor:(color 55 137 221) offset:[0, -4] align:#center
		
	)
	group "关键帧辅助" (
		checkButton uiBtnSetAllKey "设置所有帧" checked:true highlightColor:mc_setKeyColor offset:[6, 0] across:3
		checkButton uiBtnLimbIK "IK" tooltip:"Shift + Click 应用到所有关键帧,\nCtrl + Click 应用到选定关键帧." checked:true highlightColor:(color 168 170 13) offset:[22, 0]
		checkButton uiBtnLimbFK "FK" tooltip:"Shift + Click 应用到所有关键帧,\nCtrl + Click 应用到选定关键帧." checked:true highlightColor:(color 86 87 7) offset:[8, 0]
        
		label uiLabelLoopRagne "循环" tooltip:"Loop Range" align:#left offset:[-2, 2] across:4
		spinner uiSpnLoopStart tooltip:"起始" type:#integer range:[-9999,9999,0] width:40 align:#left offset:[-12, 2]
		spinner uiSpnLoopEnd tooltip:"结束" type:#integer range:[-9999,9999,30] width:40 align:#left offset:[-6, 2]
		button uiBtnGotoMirror "镜像" tooltip:"跳转到镜像帧" align:#right offset:[8, -2] width:38
		checkButton uiBtnLoopTrim "修减" width:40 offset:[-3, -2] checked:true highlightColor:mc_setKeyColor tooltip:"删除范围外所有关键帧" across:4
		-- checkButton uiBtnLoopDupe "Dupl." width:40 offset:[6, 0] checked:true highlightColor:(color 60 0 0) tooltip:"Duplicate the keys before and after the Loop."
		checkButton uiBtnLoopSel "选择" width:40 offset:[6, -2] checked:true highlightColor:(color 123 74 0) align:#center tooltip:"选择范围内所有关键帧"
		button uiBtnLoopGet "范围" offset:[12, -2] width:30 tooltip:"获取当前时间轴范围"
		button uiBtnLoopSet "设置" offset:[10, -2] width:30 tooltip:"设置为时间轴范围"
    )
	
	dropdownlist uiDropPlaySpeed items:#("1/4x Speed", "1/2x Speed", " 1x Speed", "2x Speed", "4x Speed") selection:3 tooltip:"Playback Speed" width:90 offset:[-8, 0] across:2
	checkbutton uiPlayBlock "播放Block" offset:[14, 0] width:60 tooltip:"播放选定biped肢体的Block动画"
	timer clock "PlayClock" interval:1 active:false -- 啊厘 狐弗 牢磐国肺
	
	
	
	group "选择集工具"
	(
	button btnCreateSelSet "创建" width:30 height:20  enabled:true tooltip:"创建选择集" across:4
	button btnDeleteSelSet "删除" width:30 height:20  enabled:true tooltip:"删除选择集" 
	button btnSaveXml "保存" width:30 height:20  tooltip:"保存选择集" 
	button btnLoadXml "加载" width:30 height:20  tooltip:"加载选择集" 
	button btnAddToSelSet "添加" width:30 height:20  enabled:true tooltip:"添加所选物体到选中的选择集" across:4
	button btnRemoveFromSelSet "移除" width:30 height:20  enabled:true tooltip:"从选中的选择集中移除所选物体" 
	button btnHighlightSelObj "高亮" width:30 height:20  enabled:true tooltip:"高亮选中物体及其所在选择集"
	button btnUpdateList "更新" width:30 height:20 tooltip:"更新列表" 
	
	
		
	MultiListBox mlbSelSet "" width:135 height:6
	MultiListBox mlbSelSetNode "" width:135 height:6  enabled:true
	label lblCount "" width:135 height:15 
	)

    local m_workingBipRoot -- 泅犁 累诀吝牢 官捞菩靛狼 风飘 畴靛

	local m_Head
	local m_RArms
	local m_Necks
	local m_LArms
	local m_RClavicle
	local m_LClavicle
	local m_RUpArm
	local m_AllSpine
	local m_Spine2
	local m_Spine1
	local m_Spine0
	local m_LUpArm
	local m_RForArm
	local m_LForArm
	local m_RHand
	local m_COM
	local m_LHand
	local m_Pelvis
	local m_RThigh
	local m_LThigh
	local m_RCalf
	local m_LCalf
	local m_RFoot
	local m_LFoot
	local m_RToe
	local m_LToe
	local m_RLegs
	local m_AllFoot
	local m_LLegs
	local m_AllBip

	local m_goto1
	local m_goto2
	local m_goto3
	local m_goto4
	local m_goto5
	local m_goto6
	local m_goto7
    local m_goto8
    
    local m_PBKeyTimeArray      -- 喉钒欧 局聪皋捞记侩 虐 鸥烙 硅凯 肺拿 函荐 (Frame)
    local m_PBKeyMiliSecArray  -- 喉钒欧 局聪皋捞记侩 虐 鸥烙 硅凯 肺拿 函荐 (剐府技牧靛)
    local m_PBStartTime     -- 喉钒欧 局聪皋捞记 馆汗 矫累矫埃 厚背侩 扁废
    local m_PBPointer       -- 绢叼鳖瘤 犁积吝牢瘤 扁废窍绰 器牢磐
    local m_PBPlaySpeed     -- 犁积 加档 啊加 皑加侩, uiDropPlaySpeed 客 楷悼凳
	
	struct BipType
	(
		limbName,
		linkIndex
    )
    
    function SetPBPlaySpeed = (
        case timeConfiguration.playbackSpeed of (
        1: (m_PBPlaySpeed = 4.0) -- 1/4 加档扼辑 4硅 歹 奴 矫埃 蔼阑 利侩秦具窃
        2: (m_PBPlaySpeed = 2.0)
        3: (m_PBPlaySpeed = 1.0)
        4: (m_PBPlaySpeed = 0.5)
        5: (m_PBPlaySpeed = 0.25) -- 4硅 加档扼辑 0.25硅 累篮 矫埃蔼阑 利侩秦具窃
        )
    )

	-- 官捞菩靛 COM牢瘤 八荤
	fn IfBipRoot obj = (
		if ((classof obj.baseobject) == Biped_Object) do (
			if (obj.controller.rootNode == obj) do (return true)
		)
		return false
	)

	fn SaveRangeLoop = (
		if (m_workingBipRoot == undefined or (isDeleted m_workingBipRoot)) do return ()
		setUserProp m_workingBipRoot "SoxBA_RangeLoopStart" uiSpnLoopStart.value
		setUserProp m_workingBipRoot "SoxBA_RangeLoopEnd" uiSpnLoopEnd.value
	)

	fn LoadRangeLoop = (
		if (m_workingBipRoot == undefined or (isDeleted m_workingBipRoot)) do return ()
		try (
			uiSpnLoopStart.value = getUserProp m_workingBipRoot "SoxBA_RangeLoopStart"
			uiSpnLoopEnd.value = getUserProp m_workingBipRoot "SoxBA_RangeLoopEnd"
		) catch ()
	)

	fn SaveRangeA = (
		if (m_workingBipRoot == undefined or (isDeleted m_workingBipRoot)) do return ()
		
		
	)

	fn LoadRangeA = (
		if (m_workingBipRoot == undefined or (isDeleted m_workingBipRoot)) do return ()
		
	)

	fn SaveRangeB = (
		if (m_workingBipRoot == undefined or (isDeleted m_workingBipRoot)) do return ()
		
	)

	fn LoadRangeB = (
		if (m_workingBipRoot == undefined or (isDeleted m_workingBipRoot)) do return ()

	)

	fn LoadGoto = (
		if (m_workingBipRoot == undefined or (isDeleted m_workingBipRoot)) do return ()
		try (
			m_goto1 = getUserProp m_workingBipRoot "SoxBA_Goto1"
			if (m_goto1 == "undefined") do (m_goto1 = undefined)
			m_goto2 = getUserProp m_workingBipRoot "SoxBA_Goto2"
			if (m_goto2 == "undefined") do (m_goto2 = undefined)
			m_goto3 = getUserProp m_workingBipRoot "SoxBA_Goto3"
			if (m_goto3 == "undefined") do (m_goto3 = undefined)
			m_goto4 = getUserProp m_workingBipRoot "SoxBA_Goto4"
			if (m_goto4 == "undefined") do (m_goto4 = undefined)
			m_goto5 = getUserProp m_workingBipRoot "SoxBA_Goto5"
			if (m_goto5 == "undefined") do (m_goto5 = undefined)
			m_goto6 = getUserProp m_workingBipRoot "SoxBA_Goto6"
			if (m_goto6 == "undefined") do (m_goto6 = undefined)
			m_goto7 = getUserProp m_workingBipRoot "SoxBA_Goto7"
			if (m_goto7 == "undefined") do (m_goto7 = undefined)
			m_goto8 = getUserProp m_workingBipRoot "SoxBA_Goto8"
			if (m_goto8 == "undefined") do (m_goto8 = undefined)
		) catch ()
	)

	fn SaveGoto ui val index = (
		if (m_workingBipRoot == undefined or (isDeleted m_workingBipRoot)) do return ()
		local pString = "SoxBA_Goto" + (index as string)
		try (
			setUserProp m_workingBipRoot pString val
		) catch ()
	)

	fn SetGotoBtnTextSub ui val = (
		local tString
		if (val == undefined) then (tString = "") else (tString = (val as string))
		ui.text = tString
		ui.tooltip = tString
	)

	


	-- m_goto1 殿狼 函荐甫 曼炼 屈侥栏肺 &val 概俺函荐俊 傈崔
	fn GotoFrame ui &val index = (
		if (keyboard.controlPressed) do (
			val = int sliderTime
			
			SaveGoto ui val index
			return ()
		)

		if (keyboard.altPressed) do (
			val = undefined
			
			SaveGoto ui val index
			return ()
		)

		if (val != undefined) do (
			try (
				sliderTime = val
			) catch ()
		)
	)
	
		-- 府畔 胶飘钒媚狼 糕滚 : limbName, linkIndex
	function GetBipedType obj = (
		if ( obj == undefined ) do return undefined
		if ( (classof obj.baseobject) != Biped_Object ) do return (bipType limbName:#nonBiped linkIndex:0)
		
		-- biped.maxNumLinks $ 捞 规过栏肺 官捞菩靛狼 弥措 傅农 荐甫 舅酒尘 荐 乐促. 焊烹 25捞瘤父 乘乘窍霸 30
		loopCount = 30
		types = #(
			#larm,
			#rarm,
			#lfingers,
			#rfingers,
			#lleg,
			#rleg,
			#ltoes,
			#rtoes,
			#spine,
			#tail,
			#head,
			#pelvis,
			#vertical,
			#horizontal,
			#turn,
			#footprints,
			#neck,
			#pony1,
			#pony2,
			#prop1,
			#prop2,
			#prop3,
			#lfArmTwist,
			#rfArmTwist,
			#lUparmTwist,
			#rUparmTwist,
			#lThighTwist,
			#rThighTwist,
			#lCalfTwist,
			#rCalfTwist,
			#lHorseTwist,
			#rHorseTwist			
		)
		
		for o in types do (
			for p = 1 to loopCount do (
				if ( try ( obj == biped.getNode obj o link:p ) catch false ) do (
					returnType = (bipType limbName:o linkIndex:p)
					return returnType
				)
			)
		)
		
		-- 钙胶 胶农赋飘俊辑 Xtra 夯阑 傈囚 瘤盔窍瘤 臼酒辑 绢驴 荐 绝捞 官捞菩靛 努贰胶牢单 沥眉甫 舅酒郴瘤 给茄扒 葛滴 Xtra肺 沥狼
		-- https://forums.cgsociety.org/t/biped-xtra-maxscript-commands/1570351/5 见败柳 官捞菩靛 Xtra 窃荐甸阑 粱 混旗毫具且淀.
		return (bipType limbName:#xtra linkIndex:0)
	)
	
	-- 泅犁 坷宏璃飘啊 局聪皋捞记 虐 瘤沥捞 啊瓷茄 官捞菩靛牢瘤甫 八荤 true 客 false 府畔
	function IfKeyableBip obj =
	(
		if ( classof obj.baseobject != Biped_object ) do return false
		
		tType = GetBipedType obj
		
		returnBool = case tType.limbName of
		(
			#footprints: false
			#lfArmTwist: false
			#rfArmTwist: false
			#lUparmTwist: false
			#rUparmTwist: false
			#lThighTwist: false
			#rThighTwist: false
			#lCalfTwist: false
			#rCalfTwist: false
			#lHorseTwist: false
			#rHorseTwist: false
			default: true
		)
		return returnBool
	)
	
	-- 官捞菩靛 何困甸 吝 Limb, COM, NoKey, Etc 甫 备盒窍咯 府畔 (局聪皋捞记 虐 汗力 规侥捞 促抚)
	function GetBipKeyType obj = (
		if ( classof obj.baseobject != Biped_object ) do return false
		
		tType = GetBipedType obj

		if tType.limbName == #vertical OR\
			tType.limbName == #horizontal OR\
			tType.limbName == #turn do (
			return "COM"
		)

		if tType.limbName == #larm OR\
			tType.limbName == #rarm OR\
			tType.limbName == #lleg OR\
			tType.limbName == #rleg OR\
			tType.limbName == #ltoes OR\
			tType.limbName == #rtoes do (
				return "Limb"
		)

		if tType.limbName == #lfArmTwist OR\
			tType.limbName == #rfArmTwist OR\
			tType.limbName == #lUparmTwist OR\
			tType.limbName == #rUparmTwist OR\
			tType.limbName == #lThighTwist OR\
			tType.limbName == #rThighTwist OR\
			tType.limbName == #lCalfTwist OR\
			tType.limbName == #rCalfTwist OR\
			tType.limbName == #lHorseTwist OR\
			tType.limbName == #rHorseTwist OR\
			tType.limbName == #footprints do (
				return "NoKey"
		)
		
		return "Etc"
	)

	-- 官捞菩靛 Limb 傈侩 扁瓷阑 困秦 Limb 牢瘤 眉农窍绰 窃荐
	function IfLimb obj = (
		if ( classof obj.baseobject != Biped_object ) do return false
		tType = GetBipedType obj
		if tType.limbName == #larm OR\
			tType.limbName == #rarm OR\
			tType.limbName == #lleg OR\
			tType.limbName == #rleg OR\
			tType.limbName == #ltoes OR\
			tType.limbName == #rtoes do (
				return true
		)
		return false
	)
	
    fn DeselectAllKeys obj = (
		-- 贸澜浚 汗棱茄 规过栏肺 老老捞 虐 窍唱究 风橇 倒酒啊哥 急琶 秦力沁绰单, 苟蹲弊妨辑 controller 肺 窍聪 肋 登绰淀
		deselectKeys obj.controller
	)
	
	-- 捞 窃荐绰 昏力 傈 Deselect 绰 绊妨窍瘤 臼澜. (扁粮俊 Deselect 登绢辑 柳涝茄 巴阑 傈力肺 窃)
	fn TrimKeys controller frameStart frameEnd ifBip = (
		local firstKeyTime
		local lastKeyTime
		if (ifBip) then (
			local keyCount = numKeys controller
			if keyCount < 1 do return()
			firstKeyTime = (getKey controller 1).time
			lastKeyTime = (getKey controller keyCount).time
		)
		else (
			firstKeyTime = -99999
			lastKeyTime = 99999
		)

		if (firstKeyTime < frameStart) do (
			-- 焊粮 备埃焊促 菊率俊 虐啊 乐绰 版快
			selectKeys controller (interval firstKeyTime (frameStart - 1))
		)
		if (lastKeyTime > frameEnd) do (
			-- 焊粮 备埃焊促 第率俊 虐啊 乐绰 版快
			selectKeys controller (interval lastKeyTime (frameEnd + 1))
		)

		if (ifBip) then (
			biped.deleteKeys controller #selection
		)
		else (
			deleteKeys controller #selection
		)
	)

    -- obj 狼 葛电 磊侥甸阑 硅凯肺 府畔. 硅凯 鉴辑绰 拌摸备炼 鉴辑措肺
	function fnGetAllChildren obj = (
		if ( obj == undefined ) do return undefined
		
		local tAllChildren = #()
		if ( obj.children.count != 0 ) do (
			for o in obj.children do (
				append tAllChildren o
				if ( o.children.count != 0 ) do (
					tAllChildren = tAllChildren +  (fnGetAllChildren o)		-- recursive
				)
			)
		)
		return tAllChildren
	)
	
    fn SetComBtnText state = (
        if state then (
            uiCOM.text = m_workingBipRoot.name
        )
        else (
            uiCOM.text = "COM"
        )
    )

    fn SetButtonState state = (
        uiHead.state = state
        uiRArms.state = state
        uiNecks.state = state
        uiLArms.state = state
        uiRClavicle.state = state
        uiLClavicle.state = state
        uiRUpArm.state = state
		uiAllSpine.state = state
		uiSpine2.state = state
		uiSpine1.state = state
		uiSpine0.state = state
        uiLUpArm.state = state
        uiRForArm.state = state
        uiLForArm.state = state
        uiRHand.state = state
        uiCOM.state = state
        if state == false do uiCOM.text = "COM"
        uiLHand.state = state
        uiPelvis.state = state
        uiRThigh.state = state
        uiLThigh.state = state
        uiRCalf.state = state
        uiLCalf.state = state
        uiRFoot.state = state
		uiLFoot.state = state
		uiRToe.state = state
		uiLToe.state = state
        uiRLegs.state = state
        uiAllFoot.state = state
        uiLLegs.state = state
		uiAllBip.state = state
		uiPlayBlock.state = state
    )
	
	-- 纠 郴 官捞菩靛 坷宏璃飘甫 葛滴 炼荤窍咯 官捞菩靛啊 窍唱父 乐栏搁 弊 官捞菩靛甫 m_workingBipRoot俊 技泼.
	-- 泅犁 急琶等 坷宏璃飘啊 官捞菩靛搁 弊巴阑 技泼
	-- 急琶捞 己傍窍搁 true, 角菩窍搁 false 府畔
	function AutoGetBipRoot = (
		if ( try(classof selection[1].baseobject == Biped_object) catch false ) do (
            m_workingBipRoot = selection[1].controller.rootnode
            SetComBtnText true
            return true
		)
		
		for o in objects do (
			if (classof o.baseobject == Biped_object) do (
                m_workingBipRoot = o.controller.rootnode
                SetComBtnText true
                return true
			)
        )
        m_workingBipRoot = undefined -- 纠阑 货肺 坷锹茄促芭唱 窍搁 昏力等 坷宏璃飘甫 扁撅窍绊 乐阑 荐 乐绢辑 (undefined 酒丛) 馆靛矫 undefined 肺 檬扁拳秦拎具窃.
        SetComBtnText false
        SetButtonState false
		return false
	)

	-- 硅凯 哗扁
	function ArraySubtract arrFrom arrSub = (
		if arrSub.count == 0 do (return arrFrom)
		
		for o in arrSub do (
			foundNum = findItem arrFrom o
			if foundNum != 0 do (
				deleteItem arrFrom foundNum
			)
		)
		return arrFrom
	)
	
	-- 扁粮 selection 归诀苞 捞锅俊 急琶且 selArr 阑 涝仿罐酒 利例窍霸 急琶茄促. 何荐利栏肺 葛记菩澄肺狼 函版档 鞍捞 荐青
    -- selBackup 阑 荤侩且瘤绰 固沥
    -- selBackup 篮 selection as array
	function CompSelect selBackup selArr = (
		-- 窜绵虐 炼钦捞 酒公巴档 喘矾廉乐瘤 臼栏搁 狐福霸 弊成 急琶 饶 府畔
		if (keyboard.controlPressed == false) and (keyboard.altPressed == false) do (
			undo on (
				select selArr
			)
			return()
		)

		if keyboard.controlPressed do (
			selArr += selBackup
		)
		
		if keyboard.altPressed do (
			selArr = ArraySubtract selBackup selArr
		)
		
		undo on (
			if selArr.count == 0 then (
				clearSelection()
			)
			else (
				--setCommandPanelTaskMode mode:#motion
				select selArr
			)
		)
	)

	-- 官捞菩靛 硅凯捞 沥惑利牢瘤 眉农窍咯 府畔
	fn IfExistBips bipArr = (
		if (bipArr == undefined) do return false
		if (bipArr.count == 0) do return false
		for obj in bipArr do (
			-- 昏力等 坷宏璃飘俊 措秦 贸府窍妨绊 窍搁 俊矾啊 唱骨肺 try 贸府
			try (
				if (obj == undefined) do return false
				if ((classof obj.baseobject) != Biped_Object) do return false
			) catch (return false)
		)
		return true
	)

	-- 捞窍 官捞菩靛 何困甸阑 掘绢坷绰 窃荐甸篮 m_workingBipRoot甫 措惑栏肺 累悼
	fn GetHead = (
		selObj = biped.getNode m_workingBipRoot #head
		if ( selObj.isHidden == false ) or uiChkSelHiddenObj.state then (
			return #(selObj)
		)
		else (
			return #()
		)
	)
	fn GetRArms = (
		tArr = #()
		for i = 1 to 4 do (
			selObj = biped.getNode m_workingBipRoot #rarm link:i
			if selObj != undefined do -- 官捞菩靛 胶飘钒贸 汲沥俊 蝶扼 迫捞 绝绰 殿 抗寇啊 乐阑 荐 乐澜
			(
				if ( selObj.isHidden == false ) or uiChkSelHiddenObj.state do (
					append tArr selObj
				)
			)
		)
		return tArr
	)
	fn GetNecks = (
		tArr = #()
		testBool = true
		tIndex = 1
		while testBool do (
			selObj = biped.getNode m_workingBipRoot #neck link:tIndex
			if ( selObj == undefined ) then (
				testBool = false
			)
			else (
				if ( selObj.isHidden == false ) or uiChkSelHiddenObj.state do (
					append tArr selObj
				)
			)
			tIndex += 1
		)
		return tArr
	)
	fn GetLArms = (
		tArr = #()
		for i = 1 to 4 do (
			selObj = biped.getNode m_workingBipRoot #larm link:i
			if selObj != undefined do -- 官捞菩靛 胶飘钒贸 汲沥俊 蝶扼 迫捞 绝绰 殿 抗寇啊 乐阑 荐 乐澜
			(
				if ( selObj.isHidden == false ) or uiChkSelHiddenObj.state do (
					append tArr selObj
				)
			)
		)
		return tArr
	)
	fn GetRClavicle = (
		selObj = biped.getNode m_workingBipRoot #rarm link:1
		if selObj == undefined do -- 官捞菩靛 胶飘钒贸 汲沥俊 蝶扼 迫捞 绝绰 殿 抗寇啊 乐阑 荐 乐澜
		(
			return #()
		)
		if ( selObj.isHidden == false ) or uiChkSelHiddenObj.state then (
			return #(selObj)
		)
		else (
			return #()
		)
	)
	fn GetLClavicle = (
		selObj = biped.getNode m_workingBipRoot #larm link:1
		if selObj == undefined do -- 官捞菩靛 胶飘钒贸 汲沥俊 蝶扼 迫捞 绝绰 殿 抗寇啊 乐阑 荐 乐澜
		(
			return #()
		)
		if ( selObj.isHidden == false ) or uiChkSelHiddenObj.state then (
			return #(selObj)
		)
		else (
			return #()
		)
	)
	fn GetRUpArm = (
		selObj = biped.getNode m_workingBipRoot #rarm link:2
		if selObj == undefined do -- 官捞菩靛 胶飘钒贸 汲沥俊 蝶扼 迫捞 绝绰 殿 抗寇啊 乐阑 荐 乐澜
		(
			return #()
		)
		if ( selObj.isHidden == false ) or uiChkSelHiddenObj.state then (
			return #(selObj)
		)
		else (
			return #()
		)
	)
	fn GetAllSpine = (
		tArr = #()
		testBool = true
		tIndex = 1
		while testBool do (
			selObj = biped.getNode m_workingBipRoot #spine link:tIndex
			if ( selObj == undefined ) then (
				testBool = false
			)
			else (
				if ( selObj.isHidden == false ) or uiChkSelHiddenObj.state do (
					append tArr selObj
				)
			)
			tIndex += 1
		)
		return tArr
	)
	fn GetSpine index = (
		selObj = biped.getNode m_workingBipRoot #spine link:(index + 1)
		if selObj == undefined do return #()
		if ( selObj.isHidden == false ) or uiChkSelHiddenObj.state then (
			return #(selObj)
		)
		else (
			return #()
		)
	)
	fn GetLUpArm = (
		selObj = biped.getNode m_workingBipRoot #larm link:2
		if selObj == undefined do -- 官捞菩靛 胶飘钒贸 汲沥俊 蝶扼 迫捞 绝绰 殿 抗寇啊 乐阑 荐 乐澜
		(
			return #()
		)
		if ( selObj.isHidden == false ) or uiChkSelHiddenObj.state then (
			return #(selObj)
		)
		else (
			return #()
		)
	)
	fn GetRForArm = (
		selObj = biped.getNode m_workingBipRoot #rarm link:3
		if selObj == undefined do -- 官捞菩靛 胶飘钒贸 汲沥俊 蝶扼 迫捞 绝绰 殿 抗寇啊 乐阑 荐 乐澜
		(
			return #()
		)
		if ( selObj.isHidden == false ) or uiChkSelHiddenObj.state then (
			return #(selObj)
		)
		else (
			return #()
		)
	)
	fn GetLForArm = (
		selObj = biped.getNode m_workingBipRoot #larm link:3
		if selObj == undefined do -- 官捞菩靛 胶飘钒贸 汲沥俊 蝶扼 迫捞 绝绰 殿 抗寇啊 乐阑 荐 乐澜
		(
			return #()
		)
		if ( selObj.isHidden == false ) or uiChkSelHiddenObj.state then (
			return #(selObj)
		)
		else (
			return #()
		)
	)
	fn GetRHand = (
		selObj = biped.getNode m_workingBipRoot #rarm link:4
		if selObj == undefined do -- 官捞菩靛 胶飘钒贸 汲沥俊 蝶扼 迫捞 绝绰 殿 抗寇啊 乐阑 荐 乐澜
		(
			return #()
		)
		if ( selObj.isHidden == false ) or uiChkSelHiddenObj.state then (
			return #(selObj)
		)
		else (
			return #()
		)
	)
	--fn GetCOM = ()
	fn GetLHand = (
		selObj = biped.getNode m_workingBipRoot #larm link:4
		if selObj == undefined do -- 官捞菩靛 胶飘钒贸 汲沥俊 蝶扼 迫捞 绝绰 殿 抗寇啊 乐阑 荐 乐澜
		(
			return #()
		)
		if ( selObj.isHidden == false ) or uiChkSelHiddenObj.state then (
			return #(selObj)
		)
		else (
			return #()
		)
	)
	fn GetPelvis = (
		selObj = biped.getNode m_workingBipRoot #pelvis
		if ( selObj.isHidden == false ) or uiChkSelHiddenObj.state then (
			return #(selObj)
		)
		else (
			return #()
		)
	)
	fn GetRThigh = (
		selObj = biped.getNode m_workingBipRoot #rleg link:1
		if ( selObj.isHidden == false ) or uiChkSelHiddenObj.state then (
			return #(selObj)
		)
		else (
			return #()
		)
	)
	fn GetLThigh = (
		selObj = biped.getNode m_workingBipRoot #lleg link:1
		if ( selObj.isHidden == false ) or uiChkSelHiddenObj.state then (
			return #(selObj)
		)
		else (
			return #()
		)
	)
	fn GetRCalf = (
		selObj = biped.getNode m_workingBipRoot #rleg link:2
		if ( selObj.isHidden == false ) or uiChkSelHiddenObj.state then (
			return #(selObj)
		)
		else (
			return #()
		)
	)
	fn GetLCalf = (
		selObj = biped.getNode m_workingBipRoot #lleg link:2
		if ( selObj.isHidden == false ) or uiChkSelHiddenObj.state then (
			return #(selObj)
		)
		else (
			return #()
		)
	)
	fn GetRFoot = (
		local footIndex = 4 -- HorseLink啊 乐绰 版快
		if (biped.getNode m_workingBipRoot #rleg link:4) == undefined do (
			footIndex = 3
		)
		selObj = biped.getNode m_workingBipRoot #rleg link:footIndex
		if ( selObj.isHidden == false ) or uiChkSelHiddenObj.state then (
			return #(selObj)
		)
		else (
			return #()
		)
	)
	fn GetLFoot = (
		local footIndex = 4 -- HorseLink啊 乐绰 版快
		if (biped.getNode m_workingBipRoot #lleg link:4) == undefined do (
			footIndex = 3
		)
		selObj = biped.getNode m_workingBipRoot #lleg link:footIndex
		if ( selObj.isHidden == false ) or uiChkSelHiddenObj.state then (
			return #(selObj)
		)
		else (
			return #()
		)
	)
	fn GetRToe = (
		selObj = biped.getNode m_workingBipRoot #rtoes link:1
		if ( selObj.isHidden == false ) or uiChkSelHiddenObj.state then (
			return #(selObj)
		)
		else (
			return #()
		)
	)
	fn GetLToe = (
		selObj = biped.getNode m_workingBipRoot #ltoes link:1
		if ( selObj.isHidden == false ) or uiChkSelHiddenObj.state then (
			return #(selObj)
		)
		else (
			return #()
		)
	)
	fn GetRLegs = (
		tArr = #()
		for i = 1 to 4 do (
			selObj = biped.getNode m_workingBipRoot #rleg link:i
			if selObj != undefined do (		-- HorseLink 啊 乐扁档 窍绊 绝扁档 且 荐 乐澜
				if ( selObj.isHidden == false ) or uiChkSelHiddenObj.state do (
					append tArr selObj
				)
			)
		)
		append tArr (biped.getNode m_workingBipRoot #rtoes link:1)
		return tArr
	)
	fn GetAllFoot = (
		tArr = #()
		selObj = GetLFoot()
		if ( selObj[1].isHidden == false ) or uiChkSelHiddenObj.state do ( append tArr selObj[1] )
		selObj = GetRFoot()
		if ( selObj[1].isHidden == false ) or uiChkSelHiddenObj.state do ( append tArr selObj[1] )
		return tArr
	)
	fn GetLLegs = (
		tArr = #()
		for i = 1 to 4 do (
			selObj = biped.getNode m_workingBipRoot #lleg link:i
			if selObj != undefined do (		-- HorseLink 啊 乐扁档 窍绊 绝扁档 且 荐 乐澜
				if ( selObj.isHidden == false ) or uiChkSelHiddenObj.state do (
					append tArr selObj
				)
			)
		)
		append tArr (biped.getNode m_workingBipRoot #ltoes link:1)
		return tArr
	)
	fn GetAllBip = (
		local retBips = #()
		for o in objects do (
			if ( classof o.baseobject == Biped_object ) do
			(
				-- 鞍篮Bip001狼 磊侥捞搁
				if ( o.controller.rootNode == m_workingBipRoot AND (classof o.controller) != Footsteps) do
				(
					append retBips o
				)
			)
		)
		return retBips
	)
	
	-- Go to Mirror frame 滚瓢捞 累悼窍扁 困茄 炼扒 八荤 饶 滚瓢 enable 技泼
	-- 风俏 备埃 橇饭烙捞 娄荐咯具窍绊 老沥 荐 捞惑捞咯具窃
	fn SetGotoMirrorEnable = (
		--uiBtnGotoMirror
		local fCount = uiSpnLoopEnd.value - uiSpnLoopStart.value
		if (fCount < 2) do (
			uiBtnGotoMirror.enabled = false
			return ()
		)

		local fCountHalf = fCount / 2.0
		-- 圈荐牢瘤?
		if float (int fCountHalf) != fCountHalf do (
			uiBtnGotoMirror.enabled = false
			return ()
		)
		uiBtnGotoMirror.enabled = true
	)
    
	-- 累诀侩 官捞菩靛 风飘 畴靛扼带啊, 急琶侩 硅凯 函荐 殿阑 固府 技泼
	function InitLocalVars = (
		
		--uiBtnLoopDupe.enabled = false -- 俺惯吝牢 扁瓷 豪牢
		AutoGetBipRoot()
        if m_workingBipRoot == undefined then (
            SetButtonState false
            return ()
        )
        else (
            SetButtonState true
		)
		uiChkBtnScanBiped.text = "Scanning..."
		
		-- 葛电 何困 函荐甸篮 硅凯
		m_Head = GetHead()
		m_RArms = GetRArms()
		if (m_RArms.count == 0) then (uiRArms.enabled = false; uiRArms.state = false) else (uiRArms.enabled = true; uiRArms.state = true)
		m_Necks = GetNecks()
		m_LArms = GetLArms()
		if (m_LArms.count == 0) then (uiLArms.enabled = false; uiLArms.state = false) else (uiLArms.enabled = true; uiLArms.state = true)
		m_RClavicle = GetRClavicle()
		if (m_RClavicle.count == 0) then (uiRClavicle.enabled = false; uiRClavicle.state = false) else (uiRClavicle.enabled = true; uiRClavicle.state = true)
		m_LClavicle = GetLClavicle()
		if (m_LClavicle.count == 0) then (uiLClavicle.enabled = false; uiLClavicle.state = false) else (uiLClavicle.enabled = true; uiLClavicle.state = true)
		m_RUpArm = GetRUpArm()
		if (m_RUpArm.count == 0) then (uiRUpArm.enabled = false; uiRUpArm.state = false) else (uiRUpArm.enabled = true; uiRUpArm.state = true)
		m_AllSpine = GetAllSpine()
		m_Spine2 = GetSpine 2
		if (m_Spine2.count == 0) then (uiSpine2.enabled = false; uiSpine2.state = false) else (uiSpine2.enabled = true; uiSpine2.state = true)
		m_Spine1 = GetSpine 1
		if (m_Spine1.count == 0) then (uiSpine1.enabled = false; uiSpine1.state = false) else (uiSpine1.enabled = true; uiSpine1.state = true)
		m_Spine0 = GetSpine 0
		if (m_Spine0.count == 0) then (uiSpine0.enabled = false; uiSpine0.state = false) else (uiSpine0.enabled = true; uiSpine0.state = true)
		m_LUpArm = GetLUpArm()
		if (m_LUpArm.count == 0) then (uiLUpArm.enabled = false; uiLUpArm.state = false) else (uiLUpArm.enabled = true; uiLUpArm.state = true)
		m_RForArm = GetRForArm()
		if (m_RForArm.count == 0) then (uiRForArm.enabled = false; uiRForArm.state = false) else (uiRForArm.enabled = true; uiRForArm.state = true)
		m_LForArm = GetLForArm()
		if (m_LForArm.count == 0) then (uiLForArm.enabled = false; uiLForArm.state = false) else (uiLForArm.enabled = true; uiLForArm.state = true)
		m_RHand = GetRHand()
		if (m_RHand.count == 0) then (uiRHand.enabled = false; uiRHand.state = false) else (uiRHand.enabled = true; uiRHand.state = true)
		--m_COM = GetCOM()
		m_LHand = GetLHand()
		if (m_LHand.count == 0) then (uiLHand.enabled = false; uiLHand.state = false) else (uiLHand.enabled = true; uiLHand.state = true)
		m_Pelvis = GetPelvis()
		m_RThigh = GetRThigh()
		m_LThigh = GetLThigh()
		m_RCalf = GetRCalf()
		m_LCalf = GetLCalf()
		m_RFoot = GetRFoot()
		m_LFoot = GetLFoot()
		m_RToe = GetRToe()
		m_LToe = GetLToe()
		m_RLegs = GetRLegs()
		m_AllFoot = GetAllFoot()
		m_LLegs = GetLLegs()
		m_AllBip = GetAllBip()

		uiChkBtnScanBiped.text = "扫描Biped"

		LoadRangeLoop()
		LoadRangeA()
		LoadRangeB()
		LoadGoto()
		

		uiDropPlaySpeed.selection = timeConfiguration.playbackSpeed

        SetGotoMirrorEnable ()
        
        uiPlayBlock.state = false
		clock.active = false
		m_PBKeyTimeArray = #()
		m_PBKeyMiliSecArray = #()
        SetPBPlaySpeed()
	)

	-- 焊沥摹 雀傈蔼阑 涝仿罐绊 度官肺 旗林绰 扁瓷阑 茄促. bips绰 硅凯. 焊沥摹 雀傈蔼篮 Toe 殿俊辑 90档 眠啊 雀傈捞 鞘夸窃
	function Straighten bips offsetRotation = (
		for bip in bips do (
			if (bip != undefined AND (isDeleted bip) == false) do (
				biped.setTransform bip #rotation (offsetRotation * bip.parent.transform.rotation) animButtonState
			)
		)
	)

	-- Straighten 窃荐客 鞍篮 扁瓷捞瘤父 何葛 措脚俊 促弗 橇废矫 坷宏璃飘甫 扁霖栏肺 茄促.
	-- 官捞菩靛狼 Triangle Pelvis 可记锭巩俊 倾棍瘤 何葛啊 么眠牢 版快啊 辆辆 乐绢辑 碍力肺 Pelvis甫 瘤沥
	function StraightenByProxy bips proxy offsetRotation = (
		for bip in bips do (
			if (bip != undefined AND (isDeleted bip) == false) do (
				biped.setTransform bip #rotation (offsetRotation * proxy.transform.rotation) animButtonState
			)
		)
	)
	
	
	
	

	fn fnUpdateSelSetNodeList selSetAll =
	(
		local arrSelSetNodesName = #()
		for i in selSetAll do
		(
			if selectionsets[mlbSelSet.items[i]] != undefined then join arrSelSetNodesName (for i in selectionsets[mlbSelSet.items[i]] collect i.name)
		)
		arrSelSetNodesName = makeUniqueArray arrSelSetNodesName
		qsort arrSelSetNodesName fnSortNames
		-- print arrSelSetNodesName
		mlbSelSetNode.items = arrSelSetNodesName
		mlbSelSetNode.selection = 0
		lblCount.text = "当前共有 " + arrSelSetNodesName.count as string + " 个物体"
	)
	fn fnAddRemoveNode tarSelSet action =
	(
		local arrSelection = getcurrentselection()
		if arrSelection != undefined then 
		(
			case of
			(
				(action == "Add"):(tarSelSet = join (join #() tarSelSet) arrSelection)
				(action == "Del"):
				(
					for o in arrSelection do 
					(
						tarSelSet = for n in tarSelSet where n != o collect n
					)
				)
			)
		)
		tarSelSet
	)














	on btnSaveXml pressed do
	(
		local save_path = getSaveFileName caption:"Save XML File " filename:".xml" types:"XML(*.xml)|*.xml|"
		if save_path != undefined then
		(
			fnSaveSelSetAll save_path
		)
	)	

	on btnLoadXml pressed do
	(
		local pathLoad = getOpenFileName caption:"Load XML File" types:"XML(*.xml)|*.xml|"
		if pathLoad != undefined then
		(
			local dataLoad = fnLoadSelXml pathLoad
			
			if dataLoad != undefined then
			(
				print (dataLoad as string)
				arrSelSetNameLoadedAssist = dataLoad[1]
				arrSelSetObjLoadedAssist  = dataLoad[2]
				createdialog rolLoadSelSetAssist  width:200 height:350 
				rolLoadSelSetAssist.mlbLoadSelSet.items = dataLoad[1]
			)
		)
	)

	on btnUpdateList pressed do
	(
		fnUpdateSelSetList()

	)

	on mlbSelSet doubleClicked val do 
	(
		if (selectionsets[mlbSelSet.items[val]] != undefined) then 
		(
			select selectionsets[mlbSelSet.items[val]]
			fnUpdateSelSetNodeList mlbSelSet.selection

		)
	)	

	on mlbSelSet selectionEnd do
	(
		if (mlbSelSet.selection as array).count != 0 then
		(
			clearselection()
			for i in (mlbSelSet.selection as array) do 
			(
				if selectionsets[mlbSelSet.items[i]] !=undefined then selectmore selectionsets[mlbSelSet.items[i]]
			)
			fnUpdateSelSetNodeList mlbSelSet.selection

		)	
	)

	on btnDeleteSelSet pressed do with undo "DeleteSelSet" on
	(
		if (mlbSelSet.selection as array).count != 0 then
		(
			for i in (mlbSelSet.selection as array) do 
			(
				deleteItem selectionSets mlbSelSet.items[i]
			)
			fnUpdateSelSetList()

		)
	)

	on btnAddToSelSet pressed do
	(
		if (mlbSelSet.selection as array).count != 0 then
		(
			for i in (mlbSelSet.selection as array) do 
			(
				selectionsets[mlbSelSet.items[i]] = fnAddRemoveNode selectionsets[mlbSelSet.items[i]] "Add"
			)
			fnUpdateSelSetNodeList (mlbSelSet.selection as array)

		)
	)

	on btnRemoveFromSelSet pressed do undo "RemoveSelSet" on
	(
		if (mlbSelSet.selection as array).count != 0 then
		(
			for i in (mlbSelSet.selection as array) do 
			(
				selectionsets[mlbSelSet.items[i]] = fnAddRemoveNode selectionsets[mlbSelSet.items[i]] "Del"
			)
			fnUpdateSelSetNodeList (mlbSelSet.selection as array)

		)
	)

	on btnHighlightSelObj pressed do 
	(
		local arrCurSelection = getCurrentSelection()
		local arrCurSelSet = #()
		local arrSelIndex = #()
		for i in (mlbSelSet.selection as array) do 
		(
			join arrCurSelSet selectionsets[mlbSelSet.items[i]]
		)
		makeUniqueArray arrCurSelSet
		for i in arrCurSelection do 
		(
			local indexTemp = findItem mlbSelSetNode.items i.name
			if indexTemp != 0 then append arrSelIndex indexTemp
		)
		mlbSelSetNode.selection = arrSelIndex
		lblCount.text = "选中高亮 " + arrSelIndex.count as string + " 个物体"
	)

	on btnCreateSelSet pressed do 
	(
		local arrSelection = getCurrentselection()
		if arrSelection != undefined then 
		(
			createdialog rolCreateSelSet width:200 height:55 
		)
	)

	on mlbSelSetNode doubleClicked val do 
	(
		if (getNodeByName mlbSelSetNode.items[val] != undefined) then (select (getNodeByName mlbSelSetNode.items[val]))
	)	

	on mlbSelSetNode selectionEnd do 
	(
		if mlbSelSetNode.selection != 0 then
		(
			local strSelSetNode = for i in mlbSelSetNode.selection collect mlbSelSetNode.items[i]
			clearselection()
			for o in strSelSetNode where (getNodeByName o != undefined) do selectmore (getNodeByName o)
		)
	)


	on uiChkBtnScanBiped changed state do (
		uiChkBtnScanBiped.state = true
		InitLocalVars() -- 累诀侩 官捞菩靛 风飘 畴靛扼带啊, 急琶侩 硅凯 函荐 殿阑 固府 技泼
		if (m_workingBipRoot != undefined) do (select m_AllBip)
	)
	
	on uiBtnSetAllKey changed state do (
		uiBtnSetAllKey.state = true
		if (m_workingBipRoot == undefined or (isDeleted m_workingBipRoot)) do ( SetButtonState false; return ())
		if (m_workingBipRoot.transform.controller.figureMode) do (
			messageBox "You cannot add keyframes in Figure mode." title:"Sox Biped Assist Message"
			return ()
		)

		selBackup = selection as array

		-- 固府 历厘茄 硅凯俊 巩力啊 乐栏搁 促矫 硅凯阑 檬扁拳
		if (IfExistBips m_AllBip) == false do (
			m_AllBip = GetAllBip()
		)
		if (IfExistBips m_AllBip) == false do return () -- 弊贰档 巩力啊 乐栏搁 弊成 府畔
		
		undo on
		(
			for o in m_AllBip do
			(
				if ( o == m_workingBipRoot ) then
				(
					biped.addNewKey o.controller.vertical.controller slidertime
					biped.addNewKey o.controller.horizontal.controller slidertime
					biped.addNewKey o.controller.turning.controller slidertime
				)
				else
				(
					try ( biped.addNewKey o.controller slidertime ) catch ()		-- Footstep 坷宏璃飘锭巩俊 try 贸府
				)
			) -- for end
		) -- undo end	
		clearSelection()
		select selBackup
	)

	on uiBtnLimbIK changed state do (
		uiBtnLimbIK.state = on -- 绢恫 惑怕俊辑档 滚瓢 胶抛捞飘绰 喘妨乐档废
		setCommandPanelTaskMode mode:#motion -- biped.setSlidingKey 殿狼 扁瓷篮 Motion魄弛俊辑父 沥惑 累悼茄促. 促弗 镑俊辑 窍搁 钧蹲茄 磊技啊 丹绢结咙
		local timeBefore = sliderTime
		disableSceneRedraw()
		undo on (
			for obj in selection do (
				if (IfLimb obj) do (
					if (keyboard.shiftPressed OR keyboard.controlPressed) then (
						local keys = obj.controller.keys
						local animRangeBackup = animationRange -- 泪矫 官冰俊 乐绰 虐甸档 荐沥且 荐 乐档废 泅犁狼 局聪皋捞记 备埃阑 扁撅茄促.
						animationRange = Interval keys[1].time keys[keys.count].time
						for i = 1 to keys.count do (
							if keyboard.shiftPressed do (
								-- Shift啊 喘妨乐栏搁 虐 急琶苞 惑包 绝捞 葛滴 函版
								sliderTime = keys[i].time -- at time 规侥栏肺 窍搁 sliderTime狼 磊技肺 虐啊 积己登绰 巩力啊 乐绢辑 角力 sliderTime阑 函版矫难辑 柳青
								biped.setSlidingKey obj
							)
							if keyboard.controlPressed do (
								-- Ctrl捞 喘妨乐栏搁 急琶等 虐店父 函版
								if keys[i].selected == true do (
									sliderTime = keys[i].time -- at time 规侥栏肺 窍搁 sliderTime狼 磊技肺 虐啊 积己登绰 巩力啊 乐绢辑 角力 sliderTime阑 函版矫难辑 柳青
									biped.setSlidingKey obj
								)
							)
						)
						animationRange = animRangeBackup -- 促矫 盔贰措肺狼 局聪皋捞记 备埃栏肺 汗备
					)
					else (
						biped.setSlidingKey obj
					)
				)
			) -- for
		) -- Undo
		enableSceneRedraw()
		sliderTime = timeBefore
	)

	on uiBtnLimbFK changed state do (
		uiBtnLimbFK.state = on -- 绢恫 惑怕俊辑档 滚瓢 胶抛捞飘绰 喘妨乐档废
		setCommandPanelTaskMode mode:#motion -- biped.setSlidingKey 殿狼 扁瓷篮 Motion魄弛俊辑父 沥惑 累悼茄促. 促弗 镑俊辑 窍搁 钧蹲茄 磊技啊 丹绢结咙
		local timeBefore = sliderTime
		disableSceneRedraw()
		undo on (
			for obj in selection do (
				if (IfLimb obj) do (
					if (keyboard.shiftPressed OR keyboard.controlPressed) then (
						local keys = obj.controller.keys
						local animRangeBackup = animationRange -- 泪矫 官冰俊 乐绰 虐甸档 荐沥且 荐 乐档废 泅犁狼 局聪皋捞记 备埃阑 扁撅茄促.
						animationRange = Interval keys[1].time keys[keys.count].time
						for i = 1 to keys.count do (
							if keyboard.shiftPressed do (
								-- Shift啊 喘妨乐栏搁 虐 急琶苞 惑包 绝捞 葛滴 函版
								sliderTime = keys[i].time -- at time 规侥栏肺 窍搁 sliderTime狼 磊技肺 虐啊 积己登绰 巩力啊 乐绢辑 角力 sliderTime阑 函版矫难辑 柳青
								biped.setFreeKey obj
							)
							if keyboard.controlPressed do (
								-- Ctrl捞 喘妨乐栏搁 急琶等 虐店父 函版
								if keys[i].selected == true do (
									sliderTime = keys[i].time -- at time 规侥栏肺 窍搁 sliderTime狼 磊技肺 虐啊 积己登绰 巩力啊 乐绢辑 角力 sliderTime阑 函版矫难辑 柳青
									biped.setFreeKey obj
								)
							)
						)
						animationRange = animRangeBackup -- 促矫 盔贰措肺狼 局聪皋捞记 备埃栏肺 汗备
					)
					else (
						biped.setFreeKey obj
					)
				)
			) -- for
		) -- Undo
		enableSceneRedraw()
		sliderTime = timeBefore
	)
	
	on uiHead changed state do (
		if (m_workingBipRoot == undefined or (isDeleted m_workingBipRoot)) do ( SetButtonState false; return ())
		uiHead.state = on -- 绢恫 惑怕俊辑档 滚瓢 胶抛捞飘绰 喘妨乐档废
		
		if keyboard.shiftPressed do (
			-- Shift 甫 穿福搁 度官肺 旗绰 扁瓷
			Straighten m_Head ((eulerangles 0 0 0) as quat)
			return ()
		)
		
		selBackup = selection as array
		
		try(CompSelect selBackup m_Head) catch (
			m_Head = GetHead()
			select m_Head
		)
	)

	on uiNecks changed state do (
		if (m_workingBipRoot == undefined or (isDeleted m_workingBipRoot)) do ( SetButtonState false; return ())
		uiNecks.state = on -- 绢恫 惑怕俊辑档 滚瓢 胶抛捞飘绰 喘妨乐档废
		
		if keyboard.shiftPressed do (
			-- Shift 甫 穿福搁 度官肺 旗绰 扁瓷
			Straighten m_Necks ((eulerangles 0 0 0) as quat)
			return ()
		)
		
		selBackup = selection as array

		try(CompSelect selBackup m_Necks) catch (
			m_Necks = GetNecks()
			select m_Necks
		)
	)
	
	on uiRArms changed state do (
		if (m_workingBipRoot == undefined or (isDeleted m_workingBipRoot)) do ( SetButtonState false; return ())
		uiRArms.state = on -- 绢恫 惑怕俊辑档 滚瓢 胶抛捞飘绰 喘妨乐档废
		selBackup = selection as array

		try(CompSelect selBackup m_RArms) catch (
			m_RArms = GetRArms()
			select m_RArms
		)
	)
	
	on uiLArms changed state do (
		if (m_workingBipRoot == undefined or (isDeleted m_workingBipRoot)) do ( SetButtonState false; return ())
		uiLArms.state = on -- 绢恫 惑怕俊辑档 滚瓢 胶抛捞飘绰 喘妨乐档废
		selBackup = selection as array

		try(CompSelect selBackup m_LArms) catch (
			m_LArms = GetLArms()
			select m_LArms
		)
	)
	
	on uiRClavicle changed state do (
		if (m_workingBipRoot == undefined or (isDeleted m_workingBipRoot)) do ( SetButtonState false; return ())
		uiRClavicle.state = on -- 绢恫 惑怕俊辑档 滚瓢 胶抛捞飘绰 喘妨乐档废
		
		if keyboard.shiftPressed do (
			-- Shift 甫 穿福搁 度官肺 旗绰 扁瓷
			StraightenByProxy m_RClavicle m_AllSpine[m_AllSpine.count] ((eulerangles 0 90 -180) as quat)
			return ()
		)

		selBackup = selection as array

		try(CompSelect selBackup m_RClavicle) catch (
			m_RClavicle = GetRClavicle()
			select m_RClavicle
		)
	)

	on uiLClavicle changed state do (
		if (m_workingBipRoot == undefined or (isDeleted m_workingBipRoot)) do ( SetButtonState false; return ())
		uiLClavicle.state = on -- 绢恫 惑怕俊辑档 滚瓢 胶抛捞飘绰 喘妨乐档废
		
		if keyboard.shiftPressed do (
			-- Shift 甫 穿福搁 度官肺 旗绰 扁瓷
			StraightenByProxy m_LClavicle m_AllSpine[m_AllSpine.count] ((eulerangles 0 -90 -180) as quat)
			return ()
		)
		
		selBackup = selection as array

		try(CompSelect selBackup m_LClavicle) catch (
			m_LClavicle = GetLClavicle()
			select m_LClavicle
		)
	)
	
	on uiRUpArm changed state do (
		if (m_workingBipRoot == undefined or (isDeleted m_workingBipRoot)) do ( SetButtonState false; return ())
		uiRUpArm.state = on -- 绢恫 惑怕俊辑档 滚瓢 胶抛捞飘绰 喘妨乐档废
		
		if keyboard.shiftPressed do (
			-- Shift 甫 穿福搁 度官肺 旗绰 扁瓷
			Straighten m_RUpArm ((eulerangles 0 0 0) as quat)
			return ()
		)
		
		selBackup = selection as array

		try(CompSelect selBackup m_RUpArm) catch (
			m_RUpArm = GetRUpArm()
			select m_RUpArm
		)
	)

	on uiAllSpine changed state do (
		if (m_workingBipRoot == undefined or (isDeleted m_workingBipRoot)) do ( SetButtonState false; return ())
		uiAllSpine.state = on -- 绢恫 惑怕俊辑档 滚瓢 胶抛捞飘绰 喘妨乐档废
		
		if keyboard.shiftPressed do (
			-- Shift 甫 穿福搁 度官肺 旗绰 扁瓷
			Straighten m_AllSpine ((eulerangles 0 0 0) as quat)
			return ()
		)
		
		selBackup = selection as array

		try(CompSelect selBackup m_AllSpine) catch (
			m_AllSpine = GetAllSpine()
			select m_AllSpine
		)
	)

	on uiSpine2 changed state do (
		if (m_workingBipRoot == undefined or (isDeleted m_workingBipRoot)) do ( SetButtonState false; return ())
		uiSpine2.state = on -- 绢恫 惑怕俊辑档 滚瓢 胶抛捞飘绰 喘妨乐档废
		
		if keyboard.shiftPressed do (
			-- Shift 甫 穿福搁 度官肺 旗绰 扁瓷
			Straighten m_Spine2 ((eulerangles 0 0 0) as quat)
			return ()
		)
		
		selBackup = selection as array

		try(CompSelect selBackup m_Spine2) catch (
			m_Spine2 = GetSpine 2
			select m_Spine2
		)
	)

	on uiSpine1 changed state do (
		if (m_workingBipRoot == undefined or (isDeleted m_workingBipRoot)) do ( SetButtonState false; return ())
		uiSpine1.state = on -- 绢恫 惑怕俊辑档 滚瓢 胶抛捞飘绰 喘妨乐档废
		
		if keyboard.shiftPressed do (
			-- Shift 甫 穿福搁 度官肺 旗绰 扁瓷
			Straighten m_Spine1 ((eulerangles 0 0 0) as quat)
			return ()
		)
		
		selBackup = selection as array

		try(CompSelect selBackup m_Spine1) catch (
			m_Spine1 = GetSpine 1
			select m_Spine1
		)
	)

	on uiSpine0 changed state do (
		if (m_workingBipRoot == undefined or (isDeleted m_workingBipRoot)) do ( SetButtonState false; return ())
		uiSpine0.state = on -- 绢恫 惑怕俊辑档 滚瓢 胶抛捞飘绰 喘妨乐档废
		
		if keyboard.shiftPressed do (
			-- Shift 甫 穿福搁 度官肺 旗绰 扁瓷
			Straighten m_Spine0 ((eulerangles 0 0 0) as quat)
			return ()
		)
		
		selBackup = selection as array

		try(CompSelect selBackup m_Spine0) catch (
			m_Spine0 = GetSpine 0
			select m_Spine0
		)
	)

	on uiLUpArm changed state do (
		if (m_workingBipRoot == undefined or (isDeleted m_workingBipRoot)) do ( SetButtonState false; return ())
		uiLUpArm.state = on -- 绢恫 惑怕俊辑档 滚瓢 胶抛捞飘绰 喘妨乐档废
		
		if keyboard.shiftPressed do (
			-- Shift 甫 穿福搁 度官肺 旗绰 扁瓷
			Straighten m_LUpArm ((eulerangles 0 0 0) as quat)
			return ()
		)

		selBackup = selection as array

		try(CompSelect selBackup m_LUpArm) catch (
			m_LUpArm = GetLUpArm()
			select m_LUpArm
		)
	)
	
	on uiRForArm changed state do (
		if (m_workingBipRoot == undefined or (isDeleted m_workingBipRoot)) do ( SetButtonState false; return ())
		uiRForArm.state = on -- 绢恫 惑怕俊辑档 滚瓢 胶抛捞飘绰 喘妨乐档废
		
		if keyboard.shiftPressed do (
			-- Shift 甫 穿福搁 度官肺 旗绰 扁瓷
			Straighten m_RForArm ((eulerangles 0 0 0) as quat)
			return ()
		)
		
		selBackup = selection as array

		try(CompSelect selBackup m_RForArm) catch (
			m_RForArm = GetRForArm()
			select m_RForArm
		)
	)

	on uiLForArm changed state do (
		if (m_workingBipRoot == undefined or (isDeleted m_workingBipRoot)) do ( SetButtonState false; return ())
		uiLForArm.state = on -- 绢恫 惑怕俊辑档 滚瓢 胶抛捞飘绰 喘妨乐档废
		
		if keyboard.shiftPressed do (
			-- Shift 甫 穿福搁 度官肺 旗绰 扁瓷
			Straighten m_LForArm ((eulerangles 0 0 0) as quat)
			return ()
		)
		
		selBackup = selection as array

		try(CompSelect selBackup m_LForArm) catch (
			m_LForArm = GetLForArm()
			select m_LForArm
		)
	)
	
	on uiRHand changed state do (
		if (m_workingBipRoot == undefined or (isDeleted m_workingBipRoot)) do ( SetButtonState false; return ())
		uiRHand.state = on -- 绢恫 惑怕俊辑档 滚瓢 胶抛捞飘绰 喘妨乐档废
		
		if keyboard.shiftPressed do (
			-- Shift 甫 穿福搁 度官肺 旗绰 扁瓷
			Straighten m_RHand ((eulerangles 90 0 0) as quat)
			return ()
		)

		selBackup = selection as array

		try(CompSelect selBackup m_RHand) catch (
			m_RHand = GetRHand()
			select m_RHand
		)
	)

	on uiCOM changed state do (
		if (m_workingBipRoot == undefined or (isDeleted m_workingBipRoot)) do ( SetButtonState false; return ())
		uiCOM.state = on -- 绢恫 惑怕俊辑档 滚瓢 胶抛捞飘绰 喘妨乐档废
		selBackup = selection as array
        
        -- 货肺款 纠阑 凯搁 m_workingBipRoot捞 undefined绰 酒聪瘤父 俊矾 惯积窃
        try (
            if ( m_workingBipRoot.isHidden == false ) or uiChkSelHiddenObj.state then (
                CompSelect selBackup #(m_workingBipRoot)
            )
            else (
                clearselection()
            )
        )
        catch (
            if (AutoGetBipRoot() == false) do ( SetButtonState false; return ())
            if ( m_workingBipRoot.isHidden == false ) or uiChkSelHiddenObj.state then (
                CompSelect selBackup #(m_workingBipRoot)
            )
            else (
                clearselection()
            )
        )
	)
	
	on uiLHand changed state do (
		if (m_workingBipRoot == undefined or (isDeleted m_workingBipRoot)) do ( SetButtonState false; return ())
		uiLHand.state = on -- 绢恫 惑怕俊辑档 滚瓢 胶抛捞飘绰 喘妨乐档废
		
		if keyboard.shiftPressed do (
			-- Shift 甫 穿福搁 度官肺 旗绰 扁瓷
			Straighten m_LHand ((eulerangles -90 0 0) as quat)
			return ()
		)
		
		selBackup = selection as array

		try(CompSelect selBackup m_LHand) catch (
			m_LHand = GetLHand()
			select m_LHand
		)
	)
	
	on uiPelvis changed state do (
		if (m_workingBipRoot == undefined or (isDeleted m_workingBipRoot)) do ( SetButtonState false; return ())
		uiPelvis.state = on -- 绢恫 惑怕俊辑档 滚瓢 胶抛捞飘绰 喘妨乐档废
		
		if keyboard.shiftPressed do (
			-- Shift 甫 穿福搁 度官肺 旗绰 扁瓷
			Straighten m_Pelvis ((eulerangles -90 -90 0) as quat)
			return ()
		)
		
		selBackup = selection as array

		try(CompSelect selBackup m_Pelvis) catch (
			m_Pelvis = GetPelvis()
			select m_Pelvis
		)
	)
	
	on uiRThigh changed state do (
		if (m_workingBipRoot == undefined or (isDeleted m_workingBipRoot)) do ( SetButtonState false; return ())
		uiRThigh.state = on -- 绢恫 惑怕俊辑档 滚瓢 胶抛捞飘绰 喘妨乐档废
		
		if keyboard.shiftPressed do (
			-- Shift 甫 穿福搁 度官肺 旗绰 扁瓷
			StraightenByProxy m_RThigh m_Pelvis[1] ((eulerangles 0 180 0) as quat)
			return ()
		)
		
		selBackup = selection as array

		try(CompSelect selBackup m_RThigh) catch (
			m_RThigh = GetRThigh()
			select m_RThigh
		)
	)

	on uiLThigh changed state do (
		if (m_workingBipRoot == undefined or (isDeleted m_workingBipRoot)) do ( SetButtonState false; return ())
		uiLThigh.state = on -- 绢恫 惑怕俊辑档 滚瓢 胶抛捞飘绰 喘妨乐档废
		
		if keyboard.shiftPressed do (
			-- Shift 甫 穿福搁 度官肺 旗绰 扁瓷
			StraightenByProxy m_LThigh m_Pelvis[1] ((eulerangles 0 -180 0) as quat)
			return ()
		)
		
		selBackup = selection as array
		
		try(CompSelect selBackup m_LThigh) catch (
			m_LThigh = GetLThigh()
			select m_LThigh
		)
	)
	
	on uiRCalf changed state do (
		if (m_workingBipRoot == undefined or (isDeleted m_workingBipRoot)) do ( SetButtonState false; return ())
		uiRCalf.state = on -- 绢恫 惑怕俊辑档 滚瓢 胶抛捞飘绰 喘妨乐档废
		
		if keyboard.shiftPressed do (
			-- Shift 甫 穿福搁 度官肺 旗绰 扁瓷
			Straighten m_RCalf ((eulerangles 0 0 0) as quat)
			return ()
		)
		
		selBackup = selection as array

		try(CompSelect selBackup m_RCalf) catch (
			m_RCalf = GetRCalf()
			select m_RCalf
		)
	)

	on uiLCalf changed state do (
		if (m_workingBipRoot == undefined or (isDeleted m_workingBipRoot)) do ( SetButtonState false; return ())
		uiLCalf.state = on -- 绢恫 惑怕俊辑档 滚瓢 胶抛捞飘绰 喘妨乐档废
		
		if keyboard.shiftPressed do (
			-- Shift 甫 穿福搁 度官肺 旗绰 扁瓷
			Straighten m_LCalf ((eulerangles 0 0 0) as quat)
			return ()
		)
		
		selBackup = selection as array

		try(CompSelect selBackup m_LCalf) catch (
			m_LCalf = GetLCalf()
			select m_LCalf
		)
	)
	
	on uiRFoot changed state do (
		if (m_workingBipRoot == undefined or (isDeleted m_workingBipRoot)) do ( SetButtonState false; return ())
		uiRFoot.state = on -- 绢恫 惑怕俊辑档 滚瓢 胶抛捞飘绰 喘妨乐档废
		
		if keyboard.shiftPressed do (
			-- Shift 甫 穿福搁 度官肺 旗绰 扁瓷
			Straighten m_RFoot ((eulerangles 0 0 0) as quat)
			return ()
		)
		
		selBackup = selection as array

		try(CompSelect selBackup m_RFoot) catch (
			m_RFoot = GetRFoot()
			select m_RFoot
		)
	)
	
	on uiLFoot changed state do (
		if (m_workingBipRoot == undefined or (isDeleted m_workingBipRoot)) do ( SetButtonState false; return ())
		uiLFoot.state = on -- 绢恫 惑怕俊辑档 滚瓢 胶抛捞飘绰 喘妨乐档废
		
		if keyboard.shiftPressed do (
			-- Shift 甫 穿福搁 度官肺 旗绰 扁瓷
			Straighten m_LFoot ((eulerangles 0 0 0) as quat)
			return ()
		)
		
		selBackup = selection as array

		try(CompSelect selBackup m_LFoot) catch (
			m_LFoot = GetLFoot()
			select m_LFoot
		)
	)

	on uiRToe changed state do (
		if (m_workingBipRoot == undefined or (isDeleted m_workingBipRoot)) do ( SetButtonState false; return ())
		uiRToe.state = on -- 绢恫 惑怕俊辑档 滚瓢 胶抛捞飘绰 喘妨乐档废

		if keyboard.shiftPressed do (
			-- Shift 甫 穿福搁 度官肺 旗绰 扁瓷
			Straighten m_RToe ((eulerangles 0 0 90) as quat)
			return ()
		)

		selBackup = selection as array
		
		try(CompSelect selBackup m_RToe) catch (
			m_RToe = GetRToe()
			select m_RToe
		)
	)

	on uiLToe changed state do (
		if (m_workingBipRoot == undefined or (isDeleted m_workingBipRoot)) do ( SetButtonState false; return ())
		uiLToe.state = on -- 绢恫 惑怕俊辑档 滚瓢 胶抛捞飘绰 喘妨乐档废

		if keyboard.shiftPressed do (
			-- Shift 甫 穿福搁 度官肺 旗绰 扁瓷
			Straighten m_LToe ((eulerangles 0 0 90) as quat)
			return ()
		)

		selBackup = selection as array

		try(CompSelect selBackup m_LToe) catch (
			m_LToe = GetLToe()
			select m_LToe
		)
	)
	
	on uiRLegs changed state do (
		if (m_workingBipRoot == undefined or (isDeleted m_workingBipRoot)) do ( SetButtonState false; return ())
		uiRLegs.state = on -- 绢恫 惑怕俊辑档 滚瓢 胶抛捞飘绰 喘妨乐档废
		selBackup = selection as array

		try(CompSelect selBackup m_RLegs) catch (
			m_RLegs = GetRLegs()
			select m_RLegs
		)
	)
	
	on uiAllFoot changed state do (
		if (m_workingBipRoot == undefined or (isDeleted m_workingBipRoot)) do ( SetButtonState false; return ())
		uiAllFoot.state = on -- 绢恫 惑怕俊辑档 滚瓢 胶抛捞飘绰 喘妨乐档废
		selBackup = selection as array

		try(CompSelect selBackup m_AllFoot) catch (
			m_AllFoot = GetAllFoot()
			select m_AllFoot
		)
	)
	
	on uiLLegs changed state do (
		if (m_workingBipRoot == undefined or (isDeleted m_workingBipRoot)) do ( SetButtonState false; return ())
		uiLLegs.state = on -- 绢恫 惑怕俊辑档 滚瓢 胶抛捞飘绰 喘妨乐档废
		selBackup = selection as array

		try(CompSelect selBackup m_LLegs) catch (
			m_LLegs = GetLLegs()
			select m_LLegs
		)
	)
	
	on uiAllBip changed state do (
		if (m_workingBipRoot == undefined or (isDeleted m_workingBipRoot)) do ( SetButtonState false; return ())
		uiAllBip.state = on -- 绢恫 惑怕俊辑档 滚瓢 胶抛捞飘绰 喘妨乐档废
		selBackup = selection as array

		try(CompSelect selBackup m_AllBip) catch (
			m_AllBip = GetAllBip()
			select m_AllBip
		)
	)
	
	on uiSpnLoopStart changed var do (
		SaveRangeLoop()
		SetGotoMirrorEnable() -- Go to Mirror frame 滚瓢 劝己/厚劝己 汲沥
	)
	on uiSpnLoopEnd changed var do (
		SaveRangeLoop()
		SetGotoMirrorEnable() -- Go to Mirror frame 滚瓢 劝己/厚劝己 汲沥
	)




	on uiBtnGotoMirror pressed do (
		local now = int sliderTime
		if (now < uiSpnLoopStart.value) OR (now > uiSpnLoopEnd.value) do return ()

		if now == uiSpnLoopEnd.value do (now = uiSpnLoopStart.value) -- 风橇 场 橇饭烙俊辑 滚瓢捞 喘矾脸栏搁 霉 橇饭烙栏肺 埃林窃
		local fCount = uiSpnLoopEnd.value - uiSpnLoopStart.value
		fCount *= 0.5
		local targetFrame = (int sliderTime) + fCount
		if targetFrame == uiSpnLoopEnd.value do (
			sliderTime = uiSpnLoopStart.value
			return ()
		)
		if targetFrame > uiSpnLoopEnd.value then (
			sliderTime = uiSpnLoopStart.value + (targetFrame - uiSpnLoopEnd.value)
			return ()
		)
		else (
			sliderTime = targetFrame
			return ()
		)
	)
    
    fn LoopTrim = (
		undo on (
			for obj in selection do (
				DeselectAllKeys obj
				if (IfBipRoot obj) == false then (
					-- COM捞 酒聪芭唱 老馆 坷宏璃飘牢 版快
					if (classof obj.baseobject == Biped_Object) then (
						TrimKeys obj.controller uiSpnLoopStart.value uiSpnLoopEnd.value true
					)
					else (
						TrimKeys obj.controller uiSpnLoopStart.value uiSpnLoopEnd.value false
					)
				)
				else (
					-- COM牢 版快
					TrimKeys obj.controller.Vertical.controller uiSpnLoopStart.value uiSpnLoopEnd.value true
					TrimKeys obj.controller.Horizontal.controller uiSpnLoopStart.value uiSpnLoopEnd.value true
					TrimKeys obj.controller.Turning.controller uiSpnLoopStart.value uiSpnLoopEnd.value true
				)
			)
		)
	)
	on uiBtnLoopTrim changed state do (
		uiBtnLoopTrim.state = true
		LoopTrim()
	)

	fn LoopDupeCOM bip = (
		disableSceneRedraw()
		-- Turning
		local loopLength = uiSpnLoopEnd.value - uiSpnLoopStart.value
		local keyCount = numKeys bip.controller.Turning.controller
		-- 吝夸. 虐 磊眉甫 硅凯肺 掘绢坷搁 虐甫 眠啊窍绰 苞沥俊辑 牢郸胶啊 促 部牢促. 硅凯阑 deepCopy肺 汗荤窍电 够 窍电 规过捞 绝澜
		-- 弊贰辑 汗荤且 虐狼 矫埃阑 硅凯肺 霖厚秦滴绰 规过阑 荤侩窃
		local refKeyTimes = #() -- 风橇 虐甫 眠啊窍扁 傈俊 固府 促 掘绢滴绢具窃.
		for i = 1 to keyCount do (
			append refKeyTimes (getKey bip.controller.Turning.controller i).time
		)

		for i = 1 to keyCount do (
			local newTimeBefore = refKeyTimes[i] - loopLength
			local newTimeAfter = refKeyTimes[i] + loopLength
			sliderTime = refKeyTimes[i] -- 盔夯 雀傈蔼阑 掘绢棵 矫埃栏肺 痢橇
			local refRot = biped.getTransform bip #rotation 
			--Before
			if (newTimeBefore != refKeyTimes[1]) do (
				-- Before狼 汗荤窍绰 付瘤阜 虐啊 盔夯 虐狼 霉 虐客 鞍篮 困摹搁 汗荤 救窃
				sliderTime = newTimeBefore
				biped.setTransform bip #rotation refRot true
			)
			--After
			if (newTimeAfter != refKeyTimes[refKeyTimes.count]) do (
				-- After狼 汗荤窍绰 霉 虐啊 盔夯 虐狼 付瘤阜 虐客 鞍篮 困摹搁 汗荤 救窃
				sliderTime = newTimeAfter
				biped.setTransform bip #rotation refRot true
			)

			-- 菊 第 虐甫 积己茄 饶 技何 蔼甸 汗力
			local refKeyIndex = getkeyindex bip.controller.Turning.controller refKeyTimes[i]
			local refKey = biped.getKey bip.controller.Turning.controller refKeyIndex
			local newKeyIndexBefore = getkeyindex bip.controller.Turning.controller newTimeBefore
			local newKeyBefore = biped.getKey bip.controller.Turning.controller newKeyIndexBefore
			local newKeyIndexAfter = getkeyindex bip.controller.Turning.controller newTimeAfter
			local newKeyAfter = biped.getKey bip.controller.Turning.controller newKeyIndexAfter
			newKeyBefore.tension = refKey.tension;newKeyAfter.tension = refKey.tension;
			newKeyBefore.continuity = refKey.continuity;newKeyAfter.continuity = refKey.continuity;
			newKeyBefore.bias = refKey.bias;newKeyAfter.bias = refKey.bias;
			newKeyBefore.easeTo = refKey.easeTo;newKeyAfter.easeTo = refKey.easeTo;
			newKeyBefore.easeFrom = refKey.easeFrom;newKeyAfter.easeFrom = refKey.easeFrom;
		)

		-- Horizontal, Vertical 阑 虐 嘛扁 傈俊 固府 霖厚窍绰 捞蜡 : biped.setTransform bip #pos 绰 啊肺 技肺 蝶瘤瘤 臼绊 虐甫 积己窍骨肺
		-- Horizontal 霖厚
		keyCount = numKeys bip.controller.Horizontal.controller
		local refKeyTimesHor = #() -- 风橇 虐甫 眠啊窍扁 傈俊 固府 促 掘绢滴绢具窃.
		for i = 1 to keyCount do (
			append refKeyTimesHor (getKey bip.controller.Horizontal.controller i).time
		)
		-- Vertical 霖厚
		keyCount = numKeys bip.controller.Vertical.controller
		local refKeyTimesVer = #() -- 风橇 虐甫 眠啊窍扁 傈俊 固府 促 掘绢滴绢具窃.
		for i = 1 to keyCount do (
			append refKeyTimesVer (getKey bip.controller.Vertical.controller i).time
		)

		-- Horizontal
		for i = 1 to refKeyTimesHor.count do (
			local newTimeBefore = refKeyTimesHor[i] - loopLength
			local newTimeAfter = refKeyTimesHor[i] + loopLength
			sliderTime = refKeyTimesHor[i] -- 盔夯 困摹蔼阑 掘绢棵 矫埃栏肺 痢橇
			local refPos = biped.getTransform bip #pos
			--Before
			if (newTimeBefore != refKeyTimesHor[1]) do (
				-- Before狼 汗荤窍绰 付瘤阜 虐啊 盔夯 虐狼 霉 虐客 鞍篮 困摹搁 汗荤 救窃
				sliderTime = newTimeBefore
				biped.setTransform bip #pos refPos true
			)
			--After
			if (newTimeAfter != refKeyTimesHor[refKeyTimesHor.count]) do (
				-- After狼 汗荤窍绰 霉 虐啊 盔夯 虐狼 付瘤阜 虐客 鞍篮 困摹搁 汗荤 救窃
				sliderTime = newTimeAfter
				biped.setTransform bip #pos refPos true
			)
			-- Vertical 矫埃甸阑 扁废茄 硅凯俊辑 Hor 矫埃阑 茫阑 荐 绝栏搁 Vertical 虐 昏力
			if (findItem refKeyTimesVer refKeyTimesHor[i]) == 0 do (
				selectKeys bip.controller.Vertical.controller newTimeBefore
				selectKeys bip.controller.Vertical.controller newTimeAfter
				biped.deleteKeys bip.controller.Vertical.controller #selection
			)

			-- 菊 第 虐甫 积己茄 饶 技何 蔼甸 汗力
			local refKeyIndex = getkeyindex bip.controller.Horizontal.controller refKeyTimesHor[i]
			local refKey = biped.getKey bip.controller.Horizontal.controller refKeyIndex
			local newKeyIndexBefore = getkeyindex bip.controller.Horizontal.controller newTimeBefore
			local newKeyBefore = biped.getKey bip.controller.Horizontal.controller newKeyIndexBefore
			local newKeyIndexAfter = getkeyindex bip.controller.Horizontal.controller newTimeAfter
			local newKeyAfter = biped.getKey bip.controller.Horizontal.controller newKeyIndexAfter
			newKeyBefore.tension = refKey.tension;newKeyAfter.tension = refKey.tension;
			newKeyBefore.continuity = refKey.continuity;newKeyAfter.continuity = refKey.continuity;
			newKeyBefore.bias = refKey.bias;newKeyAfter.bias = refKey.bias;
			newKeyBefore.easeTo = refKey.easeTo;newKeyAfter.easeTo = refKey.easeTo;
			newKeyBefore.easeFrom = refKey.easeFrom;newKeyAfter.easeFrom = refKey.easeFrom;
			newKeyBefore.balanceFactor = refKey.balanceFactor;newKeyAfter.balanceFactor = refKey.balanceFactor;
		)

		-- Vertical
		for i = 1 to refKeyTimesVer.count do (
			local newTimeBefore = refKeyTimesVer[i] - loopLength
			local newTimeAfter = refKeyTimesVer[i] + loopLength
			sliderTime = refKeyTimesVer[i] -- 盔夯 困摹蔼阑 掘绢棵 矫埃栏肺 痢橇
			local refPos = biped.getTransform bip #pos
			--Before
			if (newTimeBefore != refKeyTimesVer[1]) do (
				-- Before狼 汗荤窍绰 付瘤阜 虐啊 盔夯 虐狼 霉 虐客 鞍篮 困摹搁 汗荤 救窃
				sliderTime = newTimeBefore
				biped.setTransform bip #pos refPos true
			)
			--After
			if (newTimeAfter != refKeyTimesVer[refKeyTimesVer.count]) do (
				-- After狼 汗荤窍绰 霉 虐啊 盔夯 虐狼 付瘤阜 虐客 鞍篮 困摹搁 汗荤 救窃
				sliderTime = newTimeAfter
				biped.setTransform bip #pos refPos true
			)
			-- Horizontal 矫埃甸阑 扁废茄 硅凯俊辑 Vertical 矫埃阑 茫阑 荐 绝栏搁 Horizontal 虐 昏力
			if (findItem refKeyTimesHor refKeyTimesVer[i]) == 0 do (
				selectKeys bip.controller.Horizontal.controller newTimeBefore
				selectKeys bip.controller.Horizontal.controller newTimeAfter
				biped.deleteKeys bip.controller.Horizontal.controller #selection
			)

			-- 菊 第 虐甫 积己茄 饶 技何 蔼甸 汗力
			local refKeyIndex = getkeyindex bip.controller.Vertical.controller refKeyTimesVer[i]
			local refKey = biped.getKey bip.controller.Vertical.controller refKeyIndex
			local newKeyIndexBefore = getkeyindex bip.controller.Vertical.controller newTimeBefore
			local newKeyBefore = biped.getKey bip.controller.Vertical.controller newKeyIndexBefore
			local newKeyIndexAfter = getkeyindex bip.controller.Vertical.controller newTimeAfter
			local newKeyAfter = biped.getKey bip.controller.Vertical.controller newKeyIndexAfter
			newKeyBefore.tension = refKey.tension;newKeyAfter.tension = refKey.tension;
			newKeyBefore.continuity = refKey.continuity;newKeyAfter.continuity = refKey.continuity;
			newKeyBefore.bias = refKey.bias;newKeyAfter.bias = refKey.bias;
			newKeyBefore.easeTo = refKey.easeTo;newKeyAfter.easeTo = refKey.easeTo;
			newKeyBefore.easeFrom = refKey.easeFrom;newKeyAfter.easeFrom = refKey.easeFrom;
			newKeyBefore.dynamicsBlend = refKey.dynamicsBlend;newKeyAfter.dynamicsBlend = refKey.dynamicsBlend;
			newKeyBefore.ballisticTension = refKey.ballisticTension;newKeyAfter.ballisticTension = refKey.ballisticTension;
		)

		enableSceneRedraw()
	)

	-- IK Blend, Body/Object 殿狼 虐蔼阑 炼荤秦辑 Planted, Sliding, Free 悸 吝 窍唱狼 鸥涝阑 府畔茄促.
	fn GetLimbKeyType key = (
		-- ikSpace 0 = Body, 1 = Object
		if key.ikBlend == 1 AND key.ikSpace == 1 AND key.ikJoinedPivot == true do return "Planted"
		if key.ikBlend == 1 AND key.ikSpace == 1 AND key.ikJoinedPivot == false  do return "Sliding"
		return "Free"
	)

	fn LoopDupeLimb bip = (
		disableSceneRedraw()

		local loopLength = uiSpnLoopEnd.value - uiSpnLoopStart.value
		local bipKeys = bip.controller.keys


		enableSceneRedraw()
	)

	on uiBtnLoopDupe changed state do (
		uiBtnLoopDupe.state = true
		LoopTrim() -- 汗力 傈俊 裹困 观狼 虐甸阑 葛滴 朝赴促.
		if (IfExistBips m_AllBip) == false do return ()
		for bip in m_AllBip do (
			local keyTypeStr = GetBipKeyType bip
			case keyTypeStr of (
				"COM": (LoopDupeCOM bip)
				"Limb": (LoopDupeLimb bip)
				"Etc": ()
				"NoKey": ()
			)
		)
	)

	on uiBtnLoopSel changed state do (
		uiBtnLoopSel.state = true

		for obj in selection do (
			DeselectAllKeys obj
			-- 急琶矫 牧飘费矾绰 技何 牧飘费矾 疙矫 绝绢档 措面 肋 急琶秦淋
			selectKeys obj.controller (interval uiSpnLoopStart.value uiSpnLoopEnd.value)
		)
	)
	
	on uiBtnLoopGet pressed do (
		undo on (
			uiSpnLoopStart.value = animationRange.start as integer / TicksPerFrame
			uiSpnLoopEnd.value = animationRange.end as integer / TicksPerFrame
			SaveRangeLoop()
		)
	)

	on uiBtnLoopSet pressed do (
		undo on (
			tFrame = uiSpnLoopEnd.value
			if ( uiSpnLoopStart.value == tFrame ) do ( tFrame += 1 )
			animationRange = interval (uiSpnLoopStart.value as time) (tFrame as time)
		)
	)



	on uiDropPlaySpeed selected sel do (
        timeConfiguration.playbackSpeed = sel
        SetPBPlaySpeed()
    )

    -- 橇饭烙阑 平栏肺, 平阑 剐府技牧靛肺 (integer 府畔)
    function FramToMilisecond frame = (
		-- animationRange.start甫 哗林瘤 臼栏搁 0橇饭烙捞 酒囱 镑俊辑 矫累且 锭 掉饭捞 惯积窃
		return ((((frame - animationRange.start) as integer) * (10.0 / 48.0) * m_PBPlaySpeed) as integer)
    )

    function AppendKeyTimeArray m_PBKeyMiliSecArray keys = (
        if keys.count == 0 do return()
        for i = 1 to keys.count do (
            if (keys[i].time >= animationRange.start) AND (keys[i].time <= animationRange.end) do (
                appendifUnique m_PBKeyMiliSecArray (FramToMilisecond keys[i].time)
                appendifUnique m_PBKeyTimeArray keys[i].time
            )
        )
        -- 局聪皋捞记 饭牢瘤狼 矫累苞 场篮 公炼扒 器窃矫糯
        appendifUnique m_PBKeyMiliSecArray (FramToMilisecond animationRange.start)
        appendifUnique m_PBKeyTimeArray animationRange.start
        appendifUnique m_PBKeyMiliSecArray (FramToMilisecond animationRange.end)
        appendifUnique m_PBKeyTimeArray animationRange.end
	)
	
	function StopBlocking = (
        clock.active = false
        uiPlayBlock.state = false
        uiPlayBlock.text = "播放Block"
	)
    
    function PlayBlocking = (
		m_PBKeyTimeArray = #() -- 喉钒欧 局聪皋捞记侩 虐 鸥烙 硅凯 肺拿 函荐 (Frame)
        m_PBKeyMiliSecArray = #() -- 喉钒欧 局聪皋捞记侩 虐 鸥烙 硅凯 肺拿 函荐 (剐府技牧靛)
        local nowTime = timeStamp()
        for obj in selection do (
            if (classof obj.baseObject) == Biped_Object do (
                if (IfBipRoot obj) then (
                    AppendKeyTimeArray m_PBKeyMiliSecArray obj.transform.controller.horizontal.controller.keys
                    AppendKeyTimeArray m_PBKeyMiliSecArray obj.transform.controller.vertical.controller.keys
                    AppendKeyTimeArray m_PBKeyMiliSecArray obj.transform.controller.turning.controller.keys
                )
                else (
                    AppendKeyTimeArray m_PBKeyMiliSecArray obj.transform.controller.keys
                )
            )
		)
		if m_PBKeyMiliSecArray.count == 0 do (
			StopBlocking()
			return() -- 老馆 坷宏璃飘甫 急琶窍搁 硅凯捞 厚绢乐澜
		)
		
		if (isAnimPlaying()) do (
			stopAnimation()
		)		
		
        sort m_PBKeyTimeArray
        sort m_PBKeyMiliSecArray
        m_PBPointer = 1
        while (m_PBKeyTimeArray[m_PBPointer] < sliderTime) do (
            m_PBPointer += 1
        )

        m_PBStartTime = timeStamp() - (FramToMilisecond sliderTime)
		sliderTime = m_PBKeyTimeArray[m_PBPointer] -- 老窜 浇扼捞歹 鸥烙阑 悼扁拳 (救窍搁 碍力肺 胶砰凳)
		clock.active = true
		uiPlayBlock.text = "停止"
    )
	
	function ReplayBlocking = (
		m_PBPointer = 1
        m_PBStartTime = timeStamp()
        sliderTime = m_PBKeyTimeArray[m_PBPointer]
	)

	on uiPlayBlock changed state do (
        if (selection.count == 0) do (
            StopBlocking()
            return()
        )
		if state then (
            PlayBlocking()
        )
        else (
            StopBlocking()
        )
    )
    
    -- Play Blocking侩 平 捞亥飘 贸府
    on clock tick do (
        if (m_PBPointer > m_PBKeyMiliSecArray.count) do return()
		local now = timeStamp()
		local pointer
		if (m_PBKeyMiliSecArray.count == m_PBPointer) then (
			ReplayBlocking()
			pointer = 1
		)
		else (
			pointer = m_PBStartTime + m_PBKeyMiliSecArray[m_PBPointer + 1] -- 促澜 虐橇饭烙苞 泅犁 矫埃阑 厚背
		)
        
        -- 泅犁 矫埃捞 促澜 橇饭烙阑 逞绢辑搁 器牢磐 刘啊, 浇扼捞歹 函版
        if ( now > pointer ) do (
            m_PBPointer += 1
            sliderTime = m_PBKeyTimeArray[m_PBPointer]
        )
        
        -- 器牢磐啊 付瘤阜 橇饭烙阑 啊府虐搁 贸澜栏肺 登倒府绊 矫累矫埃 府悸
        if (m_PBPointer >= m_PBKeyMiliSecArray.count) do (
            ReplayBlocking()
        )

        if keyboard.escPressed do (
            StopBlocking()
		)
		
		-- 寇何 夸牢俊 狼秦 碍力肺 浇扼捞歹 矫埃捞 函版登搁 荤侩磊俊 狼茄 敲饭捞 秒家肺 埃林
		if (sliderTime != m_PBKeyTimeArray[m_PBPointer]) do (
			StopBlocking()
		)
    )

	on uiAbout pressed do (
		if Left_Right=="R" then (cui.dockDialogBar SoxBipedAssist #cui_dock_left; Left_Right="L")
		else if Left_Right=="L" then (cui.dockDialogBar SoxBipedAssist #cui_dock_right; Left_Right="R")
	)
	
	on SoxBipedAssist open do (
        InitLocalVars() -- 累诀侩 官捞菩靛 风飘 畴靛扼带啊, 急琶侩 硅凯 函荐 殿阑 固府 技泼
		
		cui.RegisterDialogBar SoxBipedAssist 
        cui.dockDialogBar SoxBipedAssist #cui_dock_right
        callbacks.addScript #filePostOpen "SoxBipedAssist.InitLocalVars ()" id:#SoxBACallbackOpen
		callbacks.addScript #systemPostNew "SoxBipedAssist.InitLocalVars ()" id:#SoxBACallbackNew
		callbacks.addScript #systemPostReset "SoxBipedAssist.InitLocalVars ()" id:#SoxBACallbackReset
	)
	
	on SoxBipedAssist close do (
        callbacks.removeScripts id:#SoxBACallbackOpen
		callbacks.removeScripts id:#SoxBACallbackNew
		callbacks.removeScripts id:#SoxBACallbackReset
	)
)

createDialog SoxBipedAssist lockWidth:true
callbacks.addScript #filePostOpen "fnUpdateSelSetList()" id:#UpdateSelSetList
cui.registerDialogBar SoxBipedAssist style:#(#cui_dock_all,#cui_floatable)
